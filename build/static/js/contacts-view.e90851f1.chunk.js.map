{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","ContactForm","state","name","number","handleInputChange","ev","target","value","setState","handleSubmit","preventDefault","props","contacts","find","item","toLowerCase","alert","onSubmit","resetForm","this","className","s","container","label","type","onChange","pattern","title","required","formInput","Component","connect","contactsSelectors","getAllContacts","dispatch","contact","contactsOperations","addContact","ContactList","fetchContacts","contactList","onDeleteContact","isLaodingContacts","list","map","id","btn","onClick","getIsLoading","getFilteredContacts","deleteContact","filterValue","getFilter","onToFilter","changeFilter","filter","ContactsView"],"mappings":"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","file":"static/js/contacts-view.e90851f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__2-vQs\",\"formInput\":\"ContactForm_formInput__31XJC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__OLzsC\",\"item\":\"ContactList_item__2c7S0\",\"btn\":\"ContactList_btn__3IOHU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__2WdCZ\",\"filter\":\"Filter_filter__3agdg\",\"formInput\":\"Filter_formInput__3jfBw\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\n\r\nimport s from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // записывает данные введенные в форме\r\n  handleInputChange = (ev) => {\r\n    const { name, value } = ev.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  // отправляет данные введеные в форме\r\n  handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n    const { name } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    const uniqueContact = contacts.find(\r\n      (item) => item.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (uniqueContact) {\r\n      alert(`${name} уже есть в списке ваших контактов`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.resetForm();\r\n  };\r\n\r\n  // очищает форму после отправки\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={s.container} onSubmit={this.handleSubmit}>\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.handleInputChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            className={s.formInput}\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Phone\r\n          <input\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.handleInputChange}\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            className={s.formInput}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(contactsOperations.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nclass ContactList extends Component {\r\n  static propTypes = {\r\n    contactList: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contactList, onDeleteContact, isLaodingContacts } = this.props;\r\n    return (\r\n      <>\r\n        {isLaodingContacts && <h1>Loading..</h1>}\r\n        <ul className={s.list}>\r\n          {contactList.map(({ id, name, number }) => (\r\n            <li className={s.item} key={id}>\r\n              <p>{name}: </p> <p>{number}</p>\r\n              <button\r\n                className={s.btn}\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst { getIsLoading, getFilteredContacts } = contactsSelectors;\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLaodingContacts: getIsLoading(state),\r\n  contactList: getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { contactsSelectors, changeFilter } from \"../../redux/contacts\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filterValue, onToFilter }) => {\r\n  return (\r\n    <form className={s.container}>\r\n      <label className={s.filter}>\r\n        Find contacts by name{\" \"}\r\n        <input\r\n          type=\"text\"\r\n          value={filterValue}\r\n          onChange={onToFilter}\r\n          className={s.formInput}\r\n        />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  onToFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filterValue: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onToFilter: (ev) => dispatch(changeFilter(ev.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport ContactForm from \"../components/ContactForm\";\r\nimport ContactList from \"../components/ContactList\";\r\nimport Filter from \"../components/Filter\";\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}